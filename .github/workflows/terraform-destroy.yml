name: Terraform Destroy

on:
  workflow_dispatch:

jobs:
  terraform-destroy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.11.1
          terraform_wrapper: false

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Get Required Values from Terraform
        working-directory: ./terraform
        run: |
          # Get the Lambda role ARN and other required values
          INGESTION_BUCKET=$(terraform output -raw ingestion_bucket_name 2>/dev/null || echo "")
          PROCESSED_INGESTION_BUCKET=$(terraform output -raw processed_ingestion_bucket_name 2>/dev/null || echo "")
          FAILED_INGESTION_BUCKET=$(terraform output -raw failed_ingestion_bucket_name 2>/dev/null || echo "")
          OPENSEARCH_ENDPOINT=$(terraform output -raw opensearch_domain_endpoint 2>/dev/null || echo "")
          LAMBDA_ROLE_ARN=$(terraform output -raw lambda_role_arn 2>/dev/null || echo "")
          
          # Set environment variables for subsequent steps
          echo "INGESTION_BUCKET=$INGESTION_BUCKET" >> $GITHUB_ENV
          echo "PROCESSED_INGESTION_BUCKET=$PROCESSED_INGESTION_BUCKET" >> $GITHUB_ENV
          echo "FAILED_INGESTION_BUCKET=$FAILED_INGESTION_BUCKET" >> $GITHUB_ENV
          echo "OPENSEARCH_ENDPOINT=$OPENSEARCH_ENDPOINT" >> $GITHUB_ENV
          echo "LAMBDA_ROLE_ARN=$LAMBDA_ROLE_ARN" >> $GITHUB_ENV
          
          echo "Values extracted from Terraform:"
          echo "Lambda Role ARN: $LAMBDA_ROLE_ARN"
          echo "Ingestion Bucket: $INGESTION_BUCKET"
          echo "Processed Ingestion Bucket: $PROCESSED_INGESTION_BUCKET"
          echo "Failed Ingestion Bucket: $FAILED_INGESTION_BUCKET"
          echo "OpenSearch Endpoint: $OPENSEARCH_ENDPOINT"

      # Set up for Serverless removal
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      # Install dependencies
      - name: Install dependencies
        run: |
          npm install -g serverless
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          
          # Install serverless plugins
          cd lambda_services
          npm install --save-dev serverless-python-requirements
          cd ..

      # Remove serverless stack
      - name: Serverless Remove
        working-directory: ./lambda_services
        run: serverless remove --verbose
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1
          SERVERLESS_ACCESS_KEY: ${{ secrets.SERVERLESS_ACCESS_KEY }}
          INGESTION_BUCKET: ${{ env.INGESTION_BUCKET }}
          PROCESSED_INGESTION_BUCKET: ${{ env.PROCESSED_INGESTION_BUCKET }}
          FAILED_INGESTION_BUCKET: ${{ env.FAILED_INGESTION_BUCKET }}
          OPENSEARCH_ENDPOINT: ${{ env.OPENSEARCH_ENDPOINT }}
          LAMBDA_ROLE_ARN: ${{ env.LAMBDA_ROLE_ARN }}
          BEDROCK_ENDPOINT: "default-endpoint"

      # Check for any remaining Lambda functions and remove them
      - name: Check for remaining Lambda functions
        run: |
          echo "Checking for any remaining Lambda functions with prefix 'ingest-function' or 'query-function'"
          FUNCTIONS=$(aws lambda list-functions --query "Functions[?starts_with(FunctionName, 'ingest-function') || starts_with(FunctionName, 'query-function')].FunctionName" --output text)
          
          if [ -n "$FUNCTIONS" ]; then
            echo "Found Lambda functions that need to be manually deleted:"
            echo "$FUNCTIONS"
            
            # Delete each remaining function
            for function in $FUNCTIONS; do
              echo "Deleting Lambda function: $function"
              aws lambda delete-function --function-name $function
            done
          else
            echo "No remaining Lambda functions found."
          fi

      - name: Empty S3 Buckets
        run: |
          # Function to safely empty a bucket if it exists
          empty_bucket() {
            local bucket_name=$1
            if [ -z "$bucket_name" ]; then
              echo "Bucket name is empty, skipping"
              return
            fi
            
            # Check if bucket exists
            if aws s3api head-bucket --bucket "$bucket_name" 2>/dev/null; then
              echo "Emptying bucket: $bucket_name"
              # Remove all objects including versions and delete markers
              aws s3api list-object-versions --bucket "$bucket_name" --output json --query '{Objects: Versions[].{Key:Key,VersionId:VersionId}} + {Objects: DeleteMarkers[].{Key:Key,VersionId:VersionId}}' | \
              jq 'if .Objects then {Objects: .Objects, Quiet: true} else null end' | \
              grep -v "null" | \
              xargs -0 -I {} aws s3api delete-objects --bucket "$bucket_name" --delete '{}'
              
              # Remove remaining objects (if any)
              aws s3 rm s3://"$bucket_name" --recursive
              echo "Bucket $bucket_name emptied successfully"
            else
              echo "Bucket $bucket_name does not exist or is not accessible, skipping"
            fi
          }
          
          # Empty each bucket
          empty_bucket "${{ env.INGESTION_BUCKET }}"
          empty_bucket "${{ env.PROCESSED_INGESTION_BUCKET }}"
          empty_bucket "${{ env.FAILED_INGESTION_BUCKET }}"

      - name: Terraform Destroy Infrastructure
        working-directory: ./terraform
        run: |
          terraform destroy -auto-approve 
            