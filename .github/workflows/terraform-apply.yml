name: Terraform Apply & Serverless Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read
  actions: read
  id-token: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Set up Terraform CLI
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.11.1
      
      # Initialize Terraform
      - name: Initialize Terraform
        working-directory: ./terraform
        run: terraform init
      
      # Phase 1: Deploy infrastructure without API Gateway integration
      - name: Terraform Apply (Base Infrastructure)
        working-directory: ./terraform
        run: terraform apply -auto-approve -var "lambda_invoke_arn="
      
      # Extract Terraform outputs directly to environment variables
      - name: Extract Terraform Outputs
        id: terraform-outputs
        working-directory: ./terraform
        run: |
          # Extract values directly to environment variables using jq
          echo "INGESTION_BUCKET=$(terraform output -json s3_bucket_name | jq -r)" >> $GITHUB_ENV
          echo "FAILED_INGESTION_BUCKET=$(terraform output -json failed_ingestion_bucket_name | jq -r)" >> $GITHUB_ENV
          echo "OPENSEARCH_ENDPOINT=$(terraform output -json opensearch_domain_endpoint | jq -r)" >> $GITHUB_ENV
          echo "LAMBDA_ROLE_ARN=$(terraform output -json lambda_role_arn | jq -r)" >> $GITHUB_ENV
          
          # Set a default value for BEDROCK_ENDPOINT if needed
          echo "BEDROCK_ENDPOINT=https://bedrock-runtime.us-east-1.amazonaws.com" >> $GITHUB_ENV
          
          # Output for debugging
          echo "Terraform outputs extracted:"
          echo "INGESTION_BUCKET: ${{ env.INGESTION_BUCKET }}"
          echo "FAILED_INGESTION_BUCKET: ${{ env.FAILED_INGESTION_BUCKET }}"
          echo "OPENSEARCH_ENDPOINT: ${{ env.OPENSEARCH_ENDPOINT }}"
          echo "LAMBDA_ROLE_ARN: ${{ env.LAMBDA_ROLE_ARN }}"
      
      # Set up for Serverless deployment
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      # Install dependencies
      - name: Install dependencies
        run: |
          npm install -g serverless
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          
          # Install serverless plugins
          cd lambda_services
          npm install --save-dev serverless-python-requirements
          cd ..
      
      # Deploy serverless using existing serverless.yml
      - name: Serverless Deploy
        working-directory: ./lambda_services
        run: serverless deploy --verbose
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1
          INGESTION_BUCKET: ${{ env.INGESTION_BUCKET }}
          FAILED_INGESTION_BUCKET: ${{ env.FAILED_INGESTION_BUCKET }}
          OPENSEARCH_ENDPOINT: ${{ env.OPENSEARCH_ENDPOINT }}
          LAMBDA_ROLE_ARN: ${{ env.LAMBDA_ROLE_ARN }}
          BEDROCK_ENDPOINT: ${{ env.BEDROCK_ENDPOINT }}
      
      # Get Lambda ARN for API Gateway integration
      - name: Get Lambda ARN
        run: |
          # Get Lambda ARN for the ingest function
          LAMBDA_ARN=$(aws lambda get-function --function-name ingest-function --query 'Configuration.FunctionArn' --output text)
          REGION=$(aws configure get region || echo "us-east-1")
          LAMBDA_INVOKE_ARN="arn:aws:apigateway:${REGION}:lambda:path/2015-03-31/functions/${LAMBDA_ARN}/invocations"
          
          echo "LAMBDA_INVOKE_ARN=${LAMBDA_INVOKE_ARN}" >> $GITHUB_ENV
          echo "Lambda Invoke ARN: $LAMBDA_INVOKE_ARN"
      
      # Complete API Gateway integration
      - name: Complete API Gateway Integration
        working-directory: ./terraform
        run: terraform apply -auto-approve -var "lambda_invoke_arn=${{ env.LAMBDA_INVOKE_ARN }}"