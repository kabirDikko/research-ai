name: Terraform Apply & Serverless Deploy

on:
  push:
    branches:
      - main  # Only trigger on main branch
  workflow_dispatch:  # Allow manual triggering

permissions:
  contents: read
  actions: read
  id-token: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Set up Terraform CLI
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.11.1
      
      # Initialize Terraform
      - name: Initialize Terraform
        working-directory: ./terraform
        run: terraform init
      
      # ------------------------------
      # Phase 1: Infrastructure Deployment
      # ------------------------------
      - name: Terraform Apply (Phase 1 - Infrastructure)
        working-directory: ./terraform
        run: terraform apply -auto-approve
        # Note: Your Terraform code should be written so that API Gateway integration resources
        # (that depend on the Lambda ARN) are conditionally created (e.g. count = var.ingest_lambda_function_arn == "" ? 0 : 1)
      
      # Export Terraform outputs for Serverless use
      - name: Export Terraform Outputs
        working-directory: ./terraform
        run: |
          echo "INGESTION_BUCKET=$(terraform output -raw bucket_name)" >> $GITHUB_ENV
          echo "FAILED_INGESTION_BUCKET=$(terraform output -raw failed_ingestion_bucket)" >> $GITHUB_ENV
          echo "OPENSEARCH_ENDPOINT=$(terraform output -raw opensearch_endpoint)" >> $GITHUB_ENV
          echo "MY_LAMBDA_ROLE_ARN=$(terraform output -raw lambda_role_arn)" >> $GITHUB_ENV
          echo "LAMBDA_INVOKE_ARN=$(terraform output -raw lambda_invoke_arn)" >> $GITHUB_ENV
      # ------------------------------
      # Phase 2: Serverless Lambda Deployment
      # ------------------------------
      - name: Serverless Deploy
        uses: serverless/serverless@v3
        with:
          args: deploy
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1
          MY_LAMBDA_ROLE_ARN: ${{ env.MY_LAMBDA_ROLE_ARN }}
          INGESTION_BUCKET: ${{ env.INGESTION_BUCKET }}
          FAILED_INGESTION_BUCKET: ${{ env.FAILED_INGESTION_BUCKET }}
          OPENSEARCH_ENDPOINT: ${{ env.OPENSEARCH_ENDPOINT }}
      
      # ------------------------------
      # Phase 3: Update API Gateway Integration in Terraform
      # ------------------------------
      - name: Get Lambda ARN for Ingest Function
        id: get_lambda_arn
        run: |
          INGEST_LAMBDA_ARN=$(aws lambda get-function --function-name ingest-function --query 'Configuration.FunctionArn' --output text)
          echo "INGEST_LAMBDA_ARN=${INGEST_LAMBDA_ARN}" >> $GITHUB_ENV

      - name: Terraform Apply (Phase 3 - API Gateway Integration)
        working-directory: ./terraform
        run: terraform apply -auto-approve -var "lambda_invoke_arn=${{ env.LAMBDA_INVOKE_ARN }}"