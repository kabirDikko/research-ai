name: Terraform Apply & Serverless Deploy

on:
  push:
    branches:
      - main  # Only trigger on main branch
  workflow_dispatch:  # Allow manual triggering

permissions:
  contents: read
  actions: read
  id-token: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Set up Terraform CLI
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.11.1
      
      # Initialize Terraform
      - name: Initialize Terraform
        working-directory: ./terraform
        run: terraform init
      
      # ------------------------------
      # Phase 1: Infrastructure Deployment (without API Gateway integration)
      # ------------------------------
      - name: Terraform Apply (Phase 1 - Base Infrastructure)
        working-directory: ./terraform
        run: terraform apply -auto-approve -var "lambda_invoke_arn="
      
      # ------------------------------
      # Phase 2: Serverless Lambda Deployment
      # ------------------------------
      # Set up Python for Lambda functions
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      # Set up Node.js for Serverless Framework
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          
      # Install Serverless Framework globally
      - name: Install Serverless Framework
        run: npm install -g serverless
        
      # Install Python dependencies
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          
      # Install Serverless plugins if needed
      - name: Install Serverless plugins
        run: |
          if [ -f package.json ]; then npm ci; fi
          
      # Serverless Deploy with direct AWS lookups
      - name: Serverless Deploy
        run: |
          # Look up necessary resources directly with AWS CLI
          INGESTION_BUCKET=$(aws s3api list-buckets --query "Buckets[?contains(Name, 'ingestion')].Name" --output text | head -n 1)
          ERROR_BUCKET=$(aws s3api list-buckets --query "Buckets[?contains(Name, 'failed-ingestion')].Name" --output text | head -n 1)
          
          # Look up OpenSearch domain endpoint
          OS_DOMAIN_NAME=$(aws opensearch list-domain-names --query "DomainNames[0].DomainName" --output text)
          OPENSEARCH_ENDPOINT=$(aws opensearch describe-domain --domain-name $OS_DOMAIN_NAME --query "DomainStatus.Endpoint" --output text)
          
          # Look up Lambda role ARN
          ROLE_NAME=$(aws iam list-roles --query "Roles[?contains(RoleName, 'lambda')].RoleName" --output text | head -n 1)
          LAMBDA_ROLE_ARN=$(aws iam get-role --role-name $ROLE_NAME --query "Role.Arn" --output text)
          
          # Deploy with Serverless using the looked-up values
          serverless deploy \
            --param="INGESTION_BUCKET=$INGESTION_BUCKET" \
            --param="FAILED_INGESTION_BUCKET=$ERROR_BUCKET" \
            --param="OPENSEARCH_ENDPOINT=$OPENSEARCH_ENDPOINT" \
            --param="MY_LAMBDA_ROLE_ARN=$LAMBDA_ROLE_ARN"
      
      # ------------------------------
      # Phase 3: Get Lambda ARN and Complete API Gateway Integration
      # ------------------------------
      - name: Terraform Apply with Lambda integration
        working-directory: ./terraform
        run: |
          # Lookup Lambda ARN directly with AWS CLI
          LAMBDA_ARN=$(aws lambda list-functions --query "Functions[?FunctionName=='ingest-function'].FunctionArn" --output text)
          LAMBDA_INVOKE_ARN=$(echo $LAMBDA_ARN | sed 's/function/invocation/')
          
          # Apply Terraform with the Lambda ARN
          terraform apply -auto-approve -var "lambda_invoke_arn=$LAMBDA_INVOKE_ARN"