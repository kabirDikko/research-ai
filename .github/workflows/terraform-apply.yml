name: Terraform Apply

on:
  push:
    branches:
      - main  # Only trigger on main branch
  workflow_dispatch:  # Allow manual triggering

permissions:
  contents: read
  actions: read
  id-token: write  # Needed for AWS credential provider

jobs:
  terraform-apply:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.11.1
      
      - name: Initialize Terraform
        working-directory: ./terraform
        run: terraform init
      
      - name: Check if this is a workflow rerun
        id: check-rerun
        run: |
          if [[ "${{ github.run_attempt }}" -gt 1 ]]; then
            echo "This is a rerun of a failed workflow"
            echo "is_rerun=true" >> $GITHUB_OUTPUT
          else
            echo "This is the first attempt"
            echo "is_rerun=false" >> $GITHUB_OUTPUT
          fi

      - name: Try to download and use existing plan
        if: steps.check-rerun.outputs.is_rerun != 'true'
        id: download-plan
        env:
          GH_TOKEN: ${{ github.token }}
        continue-on-error: true
        run: |
          # Install GitHub CLI
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install gh
          
          # Find the latest successful run of the terraform plan workflow with an artifact
          ARTIFACT_URL=$(gh api repos/${{ github.repository }}/actions/artifacts \
            --jq '.artifacts[] | select(.name=="tfplan" and .expired==false) | .archive_download_url' \
            --header "Accept: application/vnd.github+json" \
            | head -n 1)
          
          if [ -z "$ARTIFACT_URL" ]; then
            echo "No tfplan artifact found. Will create a new plan."
            echo "has_plan=false" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Found artifact URL: $ARTIFACT_URL"
            mkdir -p terraform
            curl -L -H "Authorization: token ${{ github.token }}" \
                 -H "Accept: application/vnd.github+json" \
                 "$ARTIFACT_URL" \
                 -o terraform/tfplan.zip
            cd terraform && unzip tfplan.zip && rm tfplan.zip
            echo "has_plan=true" >> $GITHUB_OUTPUT
          fi

      - name: Create new Terraform plan
        if: steps.check-rerun.outputs.is_rerun == 'true' || steps.download-plan.outputs.has_plan != 'true'
        working-directory: ./terraform
        run: |
          echo "Creating a fresh Terraform plan based on current state"
          terraform plan -var-file=terraform.tfvars -out=tfplan

      - name: Terraform Apply
        working-directory: ./terraform
        run: |
          echo "Applying Terraform changes"
          terraform apply -auto-approve tfplan