name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  zip-lambda-functions:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install dependencies and zip ingest function
        run: |
          cd lambda_functions/ingest_function
          pip install -r requirements.txt -t .
          zip -r ../../ingest_function.zip .
          
      - name: Install dependencies and zip query function  
        run: |
          cd lambda_functions/query_function
          pip install -r requirements.txt -t .
          zip -r ../../query_function.zip .
        
  terraform:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.0
      - name: Read terraform.tfvars
        id: read_tfvars
        run: |
          cat terraform.tfvars
      - name: Run Terraform
        run: |
          terraform init
          terraform apply -var-file=terraform.tfvars -auto-approve

name: Terraform Apply

on:
  workflow_run:
    workflows: ["Terraform Plan"]
    types:
      - completed

jobs:
  terraform-apply:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.0

      - name: Wait for approval
        uses: actions/github-script@v6
        with:
          script: |
            const { Octokit } = require("@octokit/rest");
            const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });
            const { data: { conclusion } } = await octokit.actions.getWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId
            });
            if (conclusion !== 'success') {
              throw new Error('Workflow not approved');
            }

      - name: Terraform Apply
        run: |
          terraform apply -var-file=terraform.tfvars -auto-approve
